//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Movement 3rd person"",
            ""id"": ""f6b2bc20-5cf1-40e3-82ea-573ef493bf4a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c1bf31b7-72f6-440e-abcc-d131976b78d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6e583480-ef98-44c8-a608-6a0b5c35f7c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54fc1f88-22e7-4748-912a-edb4d97a7cf1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c459ca5f-1cee-4057-a6c7-63d5ffa27b8e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc06d989-9d7a-4879-865a-c510a0dd46a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""075b36d3-4f70-451b-9009-6ebb8caf8795"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""49d3fc33-4568-4744-b96e-6c1baf21864a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5895db2c-5b0e-4dc4-b704-027b4a000221"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement 3rd person
        m_Movement3rdperson = asset.FindActionMap("Movement 3rd person", throwIfNotFound: true);
        m_Movement3rdperson_Movement = m_Movement3rdperson.FindAction("Movement", throwIfNotFound: true);
        m_Movement3rdperson_mouse = m_Movement3rdperson.FindAction("mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement 3rd person
    private readonly InputActionMap m_Movement3rdperson;
    private IMovement3rdpersonActions m_Movement3rdpersonActionsCallbackInterface;
    private readonly InputAction m_Movement3rdperson_Movement;
    private readonly InputAction m_Movement3rdperson_mouse;
    public struct Movement3rdpersonActions
    {
        private @InputMaster m_Wrapper;
        public Movement3rdpersonActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement3rdperson_Movement;
        public InputAction @mouse => m_Wrapper.m_Movement3rdperson_mouse;
        public InputActionMap Get() { return m_Wrapper.m_Movement3rdperson; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Movement3rdpersonActions set) { return set.Get(); }
        public void SetCallbacks(IMovement3rdpersonActions instance)
        {
            if (m_Wrapper.m_Movement3rdpersonActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMovement;
                @mouse.started -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMouse;
                @mouse.performed -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMouse;
                @mouse.canceled -= m_Wrapper.m_Movement3rdpersonActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_Movement3rdpersonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @mouse.started += instance.OnMouse;
                @mouse.performed += instance.OnMouse;
                @mouse.canceled += instance.OnMouse;
            }
        }
    }
    public Movement3rdpersonActions @Movement3rdperson => new Movement3rdpersonActions(this);
    public interface IMovement3rdpersonActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
}
